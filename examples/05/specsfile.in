

# ------------------------------------
# Calculating properties of compounds
# ------------------------------------
prop:BM_rel_sys = no yes     # Relax system when calc. bulk modulus (BM). DEFAULT VALUE.
prop:BM_fmin  = -0.015   # Vmin is (1 + ...)*V_rel for BM calc..
prop:BM_fmax  =  0.015   # Vmax is (1 + ...)*V_rel for BM calc..
prop:BM_Nf    =  10      # Use ... points between Vmin and Vmax.
prop:BM_ef    =  1e-10   # Use ... times the energy as the uncertainty in fitting.

prop:C_rel_sys = no      # DEFAULT VALUE.
prop:C_fmin   = -0.05
prop:C_fmax   =  0.05
prop:C_Nf     =  10
prop:C_ef     =  1e-10


# ------------------------------------
# Fitting properties of compounds
# ------------------------------------
prop:fitmet       = DL   options: CG, PM, GN, LM, DL, SM, DE, PS, BC, GS, or SA (see below)
prop:nitermin     = 5
prop:nitermax     = 100

#### Negative values means that it will not be used when testing for convergence:
prop:functolabs =  1e-5
prop:functolrel = -1e-5
prop:gradtolabs =  1e-5
prop:steptolabs =  1e-5
prop:steptolrel = -1e-5

prop:dogleg_radius    = 0.5    # absolute radius in parameter space
prop:dogleg_minradius = 1e-5



# ------------------------------------
# General MDS settings
# ------------------------------------
prop:mds_skint = 1.0       # Angstrom
prop:mds_seed  = 12345
prop:mds_ndump = 10        # dump info every ndump steps (if -dmdsprop option)

prop:mds_tstart  = 0.0
prop:mds_tend    = 2000.0  5000.0
prop:mds_dt      = 3.0
prop:mds_max_dt  = 3.0

prop:mds_Tstart  =    0.5  # starting temperature T (K)
prop:mds_btc_tau =   10.0   # Berendsen time constant for T control (fs)
prop:mds_btc_T0  =    0.0   # desired T (K)

prop:mds_bpc_tau   = 80.0   # Berendsen time constant for P control (fs)
prop:mds_bpc_P0    =  0.0   # desired P (GPa)
prop:mds_bpc_scale = 50.0   # scaling constant, usually on the order of bulk modulus (GPa)

#prop:mds_quench_tstart = 2000
#prop:mds_quench_rate   = 1.0   # quenching rate (K/fs), negative value => heating

prop:mds_error_T_gt = 100000.0         # Fatal error if T gets over this limit (K).
prop:mds_error_dt_lt = 0.01           # Fatal error if dt gets under this limit (fs).
prop:mds_error_boxlen_gt = 10000.0    # Fatal error if any boxlen gets over this limit (Angstrom).



# ------------------------------------
# MDS settings for reference compounds
# ------------------------------------
# prop:ref:mds_ndump = 1        # dump info every ndump steps (if -dmdsprop option)

# Copy MDS settings for reference compounds from the general settings:
prop:ref:mds = prop:mds



# ##############################################################
# Fitting potential(s)
# ##############################################################

pot:seed         = 68129
pot:fitmet       = DL   # options: CG, PM, GN, LM, DL, SM, DE, PS, BC, GS, or SA (see below)
pot:nitermin     = 20
pot:nitermax     = 200 # 200

#### Negative values means that it will not be used when testing for convergence:
pot:functolabs = -1e-4
pot:functolrel = -1e-4
pot:gradtolabs =  1e-4
pot:steptolabs =  1e-4
pot:steptolrel = -1e-4

pot:dogleg_radius    = 0.2
pot:dogleg_minradius = 1e-5
pot:barrier_scale    = 0.0  # scaling constant for barrier function, to keep parameter
                            # values inside min/max interval
pot:simann_delta_rel = 0.2
pot:use_data_scales  = true   Use    (Y_i_readin - Y_i_predicted)/Y_i_readin instead of the
                              normal (Y_i_readin - Y_i_predicted)            in the Chi^2
                              (merit/cost) function. Here Y_i is any property, e.g. bulk
                              modulus.

  INFO:

# -------------------------------
# Gradient-based fitting methods:
# -------------------------------
# CG = conjugate gradients (ls)
# PM = Powell's method (ls)
# GN = Gauss-Newton (mi)
# LM = Levenberg-Marquardt (mi)
# DL = Powell's dog-leg method (mi) (usually most robust)
# SA = simulated annealing

#
# Population-based fitting methods:
# ---------------------------------
# SM = simplex method
# DE = differential evolution
# PS = particle swarm method
# BC = bee colony method
# GS = gravitational search method

# mi: uses matrix inversion
# ls: uses line-search, usually implies slow fitting



