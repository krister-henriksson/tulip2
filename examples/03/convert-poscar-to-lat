#! /bin/bash


# ----------------------------------------------------
# VASP POSCAR before version 5:
# ----------------------------------------------------
# # Comment
# 5.32500000
# 0.0  1.0  1.0  pbc
# 1.0  0.0  1.0  pbc
# 1.0  1.0  0.0  pbc
#   n1 n2  n3 ...
#   Direct or Cartesian
# -0.27650000  0.27650000  0.27650000
# ...
# ----------------------------------------------------
# VASP POSCAR after version 5:
# ----------------------------------------------------
# # Comment
# 5.32500000
# 0.0  1.0  1.0  pbc
# 1.0  0.0  1.0  pbc
# 1.0  1.0  0.0  pbc
#   s1 s2  s3 ...     # E.g. Fe  Cr C
#   n1 n2  n3 ...     # E.g. 127 1  1
#   Direct or Cartesian
# -0.27650000  0.27650000  0.27650000
# ...
# ----------------------------------------------------



if [ $# -lt 1 ]; then
    echo ""
    echo "Command: `basename $0`  file  elem1  [elem2  elem3 ...]"
    echo "Purpose: Convert a POSCAR file to a LAT file."
    echo "         POSCAR files are read by VASP. LAT files are read by TULIP."
    echo ""
    echo "Arguments:"
    echo "      file         POSCAR file to convert."
    echo "      elem1        Name of the first element."
    echo "      ..."
    echo ""

    exit
fi



file=$1
shift
elemnames=`echo $*`

# echo "Element names: $elemnames"



head -n 2 $file
head -n 3 $file | tail -n 1 | awk '{printf "%s  %s  %s    pbc\n", $1, $2, $3;}'
head -n 4 $file | tail -n 1 | awk '{printf "%s  %s  %s    pbc\n", $1, $2, $3;}'
head -n 5 $file | tail -n 1 | awk '{printf "%s  %s  %s    pbc\n", $1, $2, $3;}'

# ------------------------------------------------------------------------
# Vasp4: Line 7 is either 'Direct' or 'Cartesian' or some variation on these words.

internal=`head -n 7 $file | tail -n 1 | awk '{type = $1;
n1 = match(type, "D");
n2 = match(type, "d");
n3 = match(type, "C");
n4 = match(type, "c");

if      (n1 > 0 || n2 > 0) internal = 1;
else if (n3 > 0 || n4 > 0) internal = 0;
else    internal = -1;

printf "%d", internal;
}'`

# If Vasp4 then format is OK.
vaspv=4
if [ "$internal" == "-1" ] ; then
    vaspv=5
    internal=`head -n 8 $file | tail -n 1 | awk '{type = $1;
n1 = match(type, "D");
n2 = match(type, "d");
n3 = match(type, "C");
n4 = match(type, "c");

if      (n1 > 0 || n2 > 0) internal = 1;
else if (n3 > 0 || n4 > 0) internal = 0;
else    internal = -1;

printf "%d", internal;
}'`
fi

# Format should now be OK.
# ------------------------------------------------------------------------
echo $internal | awk '{
internal = $1; } END{
if      (internal==0) print "  Scaled";
else if (internal==1) print "  Internal";
else print "  Error in formatting determination!";
}'



if [ $vaspv -eq 4 ] ; then
    nn=6
else
    nn=7
fi



nat=`head -n ${nn} $file | tail -n 1 | awk 'BEGIN{n=0;}
{for (i=1; i<=NF; i++) n += $i;} END{printf "  %d", n;}'`

tmpf=tmpf.$$

let "nlines = nat + nn + 1"
head -n $nlines $file | tail -n $nat > $tmpf

line=$( head -n ${nn} $file | tail -n 1 )



echo $elemnames $line $tmpf $internal | awk '{
num = NF - 1 -1;
num2 = num / 2.0 - int(num / 2.0);
if (num2 < 0.0 || num2 > 0.0){
  print "ERROR: The number of elements and element names do not match! Exiting.";
  exit;
}
ntypes = int(num / 2.0);

nat_tot = 0;
for (i=1; i<=ntypes; i++){
  name[i] = $i;
  j = ntypes + i;
  nat[i] = $j;
  nat_tot += nat[i];
}

# print "Nat_tot: ", nat_tot;

k = NF;
internal = $k;

j = 1;
i = NF -1;
file = $i "";
while ((getline < file)>0){
  if (NF !=0){
  x[j] = $1;
  y[j] = $2;
  z[j] = $3;

  if (internal==1){
    tmpfloat = x[j];
    while (tmpfloat <  0.0) tmpfloat += 1.0;
    while (tmpfloat >= 1.0) tmpfloat -= 1.0;
    x[j] = tmpfloat;

    tmpfloat = y[j];
    while (tmpfloat <  0.0) tmpfloat += 1.0;
    while (tmpfloat >= 1.0) tmpfloat -= 1.0;
    y[j] = tmpfloat;

    tmpfloat = z[j];
    while (tmpfloat <  0.0) tmpfloat += 1.0;
    while (tmpfloat >= 1.0) tmpfloat -= 1.0;
    z[j] = tmpfloat;

  }

  j++;
  }
}
tmpint = j-1;
close(file);

# print "Nat_tot: ", tmpint;

if (nat_tot != tmpint){
  print "ERROR: The number of read-in atoms does not match the number on the element line! Exiting.";
  exit;
}


printf "%ld\n", nat_tot;


j    = 1;
ncum = 0;
for (i=1; i<=nat_tot; i++){

  if (i <= nat[j] + ncum)
    elemname = name[j];
  else {
    j++;
    ncum += nat[j-1];
    elemname = name[j];
  }

  printf "%s   %15.10f  %15.10f  %15.10f\n", elemname, x[i], y[i], z[i];
}


}'


rm -f $tmpf

